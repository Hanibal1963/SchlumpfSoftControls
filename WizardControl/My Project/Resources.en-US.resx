<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AfterSwitchPagesDescription" xml:space="preserve">
    <value>Come up after the assistant's pages have been changed and gives the user the opportunity to set up the new page.</value>
  </data>
  <data name="BeforeSwitchPagesDescription" xml:space="preserve">
    <value>Occurrence before the assistant's pages are changed to give the user the opportunity to validate.</value>
  </data>
  <data name="ButtonCancelText_PageCustom" xml:space="preserve">
    <value>OK</value>
  </data>
  <data name="ButtonCancelText_PageFinish" xml:space="preserve">
    <value>Finish</value>
  </data>
  <data name="ButtonCancelText_Standard" xml:space="preserve">
    <value>Demolition</value>
  </data>
  <data name="CancelDesription" xml:space="preserve">
    <value>Occurs when the user clicked on canceling.</value>
  </data>
  <data name="ClassDescription" xml:space="preserve">
    <value>A control for creating an assistant</value>
  </data>
  <data name="DescriptionDescription" xml:space="preserve">
    <value>Calls the description of the assistant side or defines it.</value>
  </data>
  <data name="DockDescription" xml:space="preserve">
    <value>Call or determine the edge of the overarching container a control is docked.</value>
  </data>
  <data name="FinishDescription" xml:space="preserve">
    <value>Occurs when the assistant is complete and gives the user the opportunity to do additional tasks.</value>
  </data>
  <data name="HeaderFontDescription" xml:space="preserve">
    <value>Calls the font that is used to display the description of a standard page or determine it.</value>
  </data>
  <data name="HeaderTitleFontDescription" xml:space="preserve">
    <value>Calls the font that is used to display the title of a standard page or determine it.</value>
  </data>
  <data name="HelpDescription" xml:space="preserve">
    <value>Passes up when the user clicks on the help button.</value>
  </data>
  <data name="ImageHeaderDesription" xml:space="preserve">
    <value>Calls the image displayed in the header of the standard pages or defines this festival.</value>
  </data>
  <data name="ImageWelcomeDescription" xml:space="preserve">
    <value>Calls the image displayed on the welcome and final pages or determines it.</value>
  </data>
  <data name="PagesCollectionDescription" xml:space="preserve">
    <value>Calls the listing of the assistant sides in this tab control.</value>
  </data>
  <data name="StyleDescription" xml:space="preserve">
    <value>Call the style of the assistant side or define it.</value>
  </data>
  <data name="TitleDescription" xml:space="preserve">
    <value>Call the title of the assistant side or define it.</value>
  </data>
  <data name="VisibleHelpDescription" xml:space="preserve">
    <value>Calls the visibility status of the help button or defines it.</value>
  </data>
  <data name="WelcomeFontDescription" xml:space="preserve">
    <value>Calls the font that is used to display the description of a welcome or final page or determine it.</value>
  </data>
  <data name="WelcomeTitleFontDescription" xml:space="preserve">
    <value>Calls the font that is used to display the title of a welcome or final page or determine it.</value>
  </data>
</root>